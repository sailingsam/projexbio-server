generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String                @id @default(uuid()) @db.Uuid
  firstName           String
  middleName          String?
  lastName            String?
  username            String                @unique
  email               String                @unique
  avatarFileId        String?
  isSuperAdmin        Boolean               @default(false)
  tagline             String?
  bio                 String?
  resume              String?
  appwriteId          String                @unique
  createdAt           DateTime              @default(now())
  websiteUrl          String?
  updatedAt           DateTime?              @updatedAt 
  ProjectCollaborator ProjectCollaborator[]
  projectUpvotes      ProjectUpvote[]
  userColleges        UserCollege[]
  userSocialLinks     UserSocialLink[]
  userSkillTags       UserSkillTag[]
}

model UserSocialLink {
  id       String   @id @default(uuid()) @db.Uuid
  userId   String   @db.Uuid
  platform String   // e.g., "github", "linkedin", "randomshit"
  url      String
  user     User     @relation(fields: [userId], references: [id])
  @@unique([userId, platform])
}

model SkillTag {
  id    String   @id @default(uuid()) @db.Uuid
  name  String   @unique
  slug  String   @unique
  users UserSkillTag[]
}

model UserSkillTag {
  userId     String   @db.Uuid
  skillTagId String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  skillTag   SkillTag @relation(fields: [skillTagId], references: [id])

  @@id([userId, skillTagId])
}

model College {
  id             String               @id @default(uuid()) @db.Uuid
  name           String
  slug           String               @unique
  description    String?
  location       String?
  website        String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  coverImgFileId String?
  logoFileId     String?
  emailDomains   CollegeEmailDomain[]
  projects       Project[]
  userColleges   UserCollege[]
}

model UserCollege {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  collegeId    String   @db.Uuid
  userType     UserType
  isAdmin      Boolean  @default(false)
  degreeType   String?
  branch       String?
  verified     Boolean
  joinedAt     DateTime
  leftAt       DateTime
  collegeEmail String   @unique
  designation  String?
  college      College  @relation(fields: [collegeId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model CollegeEmailDomain {
  id        String  @id @default(uuid()) @db.Uuid
  domain    String  @unique
  collegeId String  @db.Uuid
  college   College @relation(fields: [collegeId], references: [id])
}

model Project {
  id                       String                @id @default(uuid()) @db.Uuid
  title                    String
  slug                     String                @unique
  description              String?
  collegeId                String?               @db.Uuid
  githubUrl                String?
  isCollaborative          Boolean               @default(false)
  isLookingForContributors Boolean               @default(false)
  upvotesCount             Int                   @default(0)
  createdAt                DateTime              @default(now())
  college                  College?              @relation(fields: [collegeId], references: [id])
  collaborators            ProjectCollaborator[]
  tags                     ProjectTag[]
  upvotes                  ProjectUpvote[]
}

model ProjectUpvote {
  userId    String   @db.Uuid
  projectId String   @db.Uuid
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, projectId])
}

model ProjectCollaborator {
  userId    String          @db.Uuid
  projectId String          @db.Uuid
  role      ProjectUserRole
  joinedAt  DateTime        @default(now())
  project   Project         @relation(fields: [projectId], references: [id])
  user      User            @relation(fields: [userId], references: [id])

  @@id([userId, projectId])
}

model Tag {
  id       String       @id @default(uuid()) @db.Uuid
  name     String       @unique
  slug     String       @unique
  projects ProjectTag[]
}

model ProjectTag {
  projectId String  @db.Uuid
  tagId     String  @db.Uuid
  project   Project @relation(fields: [projectId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([projectId, tagId])
}

enum UserType {
  STUDENT
  FACULTY
  GENERAL
}

enum ProjectUserRole {
  OWNER
  MEMBER
  VIEWER
}
